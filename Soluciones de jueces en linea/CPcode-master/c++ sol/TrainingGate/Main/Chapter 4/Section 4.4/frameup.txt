/*
  NAME: super_j6
  LANG: C++
  PROG: frameup
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;

int h, w;
int maxh[26], maxw[26], minh[26], minw[26];
vector<string> answer;

string reverse(string before){
	string after = "";
	
	for(int i = 0; i < before.size(); i++){
		after += before[before.size() - 1 - i];
	}
	
	return after;
}

void recurse(vector<vector<char>> array, bool used[26], int amount, string sol){
	
	if(amount == 0){
		answer.push_back(reverse(sol));
		return;
	}
	
	vector<int> gone;
	
	for(int i = 0; i < 26; i++){
		if(!used[i]) continue;
		
		char curr = (char)('A' + i);
		
		bool possible = true;
		
		for(int j = minh[i]; j <= maxh[i]; j++){
			if(array[j][minw[i]] != curr && array[j][minw[i]] != '*'){
				possible = false;
				break;
			}
			
			if(array[j][maxw[i]] != curr && array[j][maxw[i]] != '*'){
				possible = false;
				break;
			}
		}
		
		if(!possible) continue;
		
		for(int j = minw[i]; j <= maxw[i]; j++){
			if(array[minh[i]][j] != curr && array[minh[i]][j] != '*'){
				possible = false;
				break;
			}
			
			if(array[maxh[i]][j] != curr && array[maxh[i]][j] != '*'){
				possible = false;
				break;
			}
		}
		
		if(!possible) continue;
		
		gone.push_back(i);
	}
	
	
	for(int i = 0; i < gone.size(); i++){
		int curr = gone[i];
		
		vector<vector<char>> newarray;
		newarray.resize(array.size());
		for(int j = 0; j < array.size(); j++) newarray[j].resize(array[0].size());
		
		for(int a = 0; a < array.size(); a++) for(int b = 0; b < array[0].size(); b++) newarray[a][b] = array[a][b];
		
		for(int j = minh[curr]; j <= maxh[curr]; j++){
			newarray[j][minw[curr]] = '*';
			newarray[j][maxw[curr]] = '*';
		}
		
		for(int j = minw[curr]; j <= maxw[curr]; j++){
			newarray[minh[curr]][j] = '*';
			newarray[maxh[curr]][j] = '*';
		}
		
		bool newused[26];
		for(int i = 0; i < 26; i++) newused[i] = used[i];
		newused[curr] = false;
		
		int newamount = amount - 1;
		string newsol = sol + (char)('A' + curr);
		
		recurse(newarray, newused, newamount, newsol);
	}
	
	return;
}

int main() {
	ifstream fin ("frameup.in");
	ofstream fout ("frameup.out");
	
	fin >> h >> w;
	vector<vector<char>> array;
	array.resize(h);
	for(int i = 0; i < 26; i++){
		maxh[i] = -1;
		maxw[i] = -1;
		minh[i] = h;
		minw[i] = w;
	}
	
	for(int i = 0; i < h; i++){
		array[i].resize(w);
		char temp[w];
		fin >> temp;
		
		for(int j = 0; j < w; j++){
			array[i][j] = temp[j];
			char l = array[i][j];
			
			if(l == '.') continue;
			
			int index = (int)(l - 'A');
			
			maxh[index] = max(maxh[index], i);
			maxw[index] = max(maxw[index], j);
			minh[index] = min(minh[index], i);
			minw[index] = min(minw[index], j);
		}
	}
	
	int amount = 0;
	bool used[26];
	
	for(int i = 0; i < 26; i++){
		used[i] = false;
		
		if(maxh[i] != -1){
			used[i] = true;
			amount ++;
		}
	}
	
	recurse(array, used, amount, "");
	
	sort(answer.begin(), answer.end());
	
	for(int i = 0; i < answer.size(); i++){
		fout << answer[i] << endl;
	}
	
	return 0;
}