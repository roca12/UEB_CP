/*
  NAME: super_j6
  LANG: C++
  PROG: milk6
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;

struct Path{
	int a, b;
	int c;
};

vector<Path> path;
vector<vector<int>> graph;
int n, m;
int infinity = 2147483647;

int maxflow(){
	int g[n][n];
	int prevnode[n], flow[n];
	bool visited[n];
	int totalflow = 0;
	int source = 0, sink = n - 1;
	
	for(int i = 0; i < n; i++) for(int j = 0; j < n; j++) g[i][j] = graph[i][j];
	
	while(true){
		
		for(int i = 0; i < n; i++){
			prevnode[i] = -1;
			flow[i] = 0;
			visited[i] = false;
		}
		
		flow[source] = infinity;
		int maxflow, maxloc;
		
		while(true){
			maxflow = 0;
			maxloc = -1;
			
			for(int i = 0; i < n; i++){
				if(flow[i] > maxflow && !visited[i]){
					maxflow = flow[i];
					maxloc = i;
				}
			}
			
			if(maxloc == -1 || maxloc == sink) break;
			
			visited[maxloc] = true;
			
			for(int i = 0; i < n; i++){
				if(i == maxloc) continue;
				
				if(flow[i] < min(maxflow, g[maxloc][i])){
					prevnode[i] = maxloc;
					flow[i] = min(maxflow, g[maxloc][i]);
				}
				
			}
			
		}
		
		if(maxloc == -1) break;
		
		totalflow += flow[sink];
		
		int curnode = sink;
		
		while(curnode != source){
			
			int nextnode = prevnode[curnode];
			
			g[nextnode][curnode] = max(g[nextnode][curnode] - flow[sink], 0);
			g[curnode][nextnode] += flow[sink];
			curnode = nextnode;
		}
		
	}
	
	return totalflow;
	
}

int main() {
	ifstream fin ("milk6.in");
	ofstream fout ("milk6.out");
	
	fin >> n >> m;
	graph.resize(n);
	for(int i = 0; i < n; i++) graph[i].resize(n);
	for(int i = 0; i < n; i++) for(int j = 0; j < n; j++) graph[i][j] = 0;
	path.resize(m);
	
	for(int i = 0; i < m; i++){
		path[i] = Path();
		int a, b, c;
		fin >> a >> b >> c;
		a--;
		b--;
		
		path[i].a = a;
		path[i].b = b;
		path[i].c = c;
		graph[a][b] += c;
	}
	
	int flow = maxflow();
	fout << flow << " ";
	
	vector<int> answer;
	
	for(int i = 0; i < m; i++){
		int a = path[i].a;
		int b = path[i].b;
		int c = path[i].c;

		if(graph[a][b] == flow && graph[a][b] == c){
			fout << 1 << endl << (i + 1) << endl;
			return 0;
		}
		
		graph[a][b] -= c;
		
		int tempflow = maxflow();
		
		if(tempflow + c == flow) answer.push_back(i);
		
		graph[a][b] += c;
	}
	
	fout << answer.size() << endl;
	
	for(int i = 0; i < answer.size(); i++){
		fout << (answer[i] + 1) << endl;
	}
	
	return 0;
}