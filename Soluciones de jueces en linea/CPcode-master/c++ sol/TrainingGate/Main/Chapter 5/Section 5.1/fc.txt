/*
  NAME: super_j6
  LANG: C++
  PROG: fc
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <math.h>
#include <iomanip>
using namespace std;

double zcross(pair<double, double> v1, pair<double, double> v2, pair<double, double> v3){
	double x1 = v1.first, y1 = v1.second, x2 = v2.first, y2 = v2.second, x3 = v3.first, y3 = v3.second;
	double distx1 = x1 - x2, disty1 = y1 - y2, distx2 = x2 - x3, disty2 = y2 - y3;
	
	return distx1 * disty2 - distx2 * disty1;
}

double dist(pair<double, double> v1, pair<double, double> v2){
	double x1 = v1.first, y1 = v1.second, x2 = v2.first, y2 = v2.second;
	
	return sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
}

int main() {
	ifstream fin ("fc.in");
	ofstream fout ("fc.out");
	
	int n;
	fin >> n;
	int midx = 0, midy = 0;
	pair<double, double> pointxy[n];
	pair<double, double> point[n];
	pair<double, int> angle[n];
	
	for(int i = 0; i < n; i++){
		double x, y;
		fin >> x >> y;
		
		pointxy[i] = make_pair(x, y);
		
		midx += x/n;
		midy += y/n;
	}
	
	for(int i = 0; i < n; i++){
		double x = (pointxy[i].first) - midx, y = (pointxy[i].second) - midy;
		point[i] = make_pair(x, y);
		
		double a = atan2(y, x);
		angle[i] = make_pair(a, i);
	}
	
	sort(angle, angle+n);
	
	int hull[n];
	for(int i = 0; i < n; i++) hull[i] = -1;
	hull[0] = angle[0].second;
	hull[1] = angle[1].second;
	int hullpos = 2;
	
	for(int i = 2; i < n - 1; i++){
		int index = angle[i].second;
		
		while(hullpos > 1 && zcross(point[hull[hullpos - 2]], point[hull[hullpos - 1]], point[index]) < 0){
			hullpos = hullpos - 1;
		}
		
		hull[hullpos] = index;
		hullpos = hullpos + 1;
	
	}
	
	int index = angle[n - 1].second;
	
	while(hullpos > 1 && zcross(point[hull[hullpos - 2]], point[hull[hullpos - 1]], point[index]) < 0){
		hullpos = hullpos - 1;
	}
	
	int hullstart = 0;
	
	bool flag = true;
	
	while(flag){
		flag = false;
		
		if(hullpos - hullstart >= 2 && -1 * zcross(point[hull[hullstart]], point[index], point[hull[hullpos-1]]) < 0){
			hullpos--;
			index = hull[hullpos];
			flag = true;
		}
		
		if(hullpos - hullstart >= 2 && -1 * zcross(point[hull[hullstart + 1]], point[hull[hullstart]], point[index]) < 0){
			hullstart++;
			flag = true;
		}
		
	}
	hull[hullpos] = index;
	hullpos++;
	
	
	double total = 0;
	
	for(int i = hullstart + 1; i < hullpos; i++){
		total += dist(point[hull[i - 1]], point[hull[i]]);
	}
	
	total += dist(point[hull[hullpos - 1]], point[hull[hullstart]]);
	
	fout << fixed;
	fout << setprecision(2);
	fout << total << endl;
	
	return 0;
}