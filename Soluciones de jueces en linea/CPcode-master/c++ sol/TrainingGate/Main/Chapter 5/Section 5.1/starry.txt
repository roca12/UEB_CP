/*
  NAME: super_j6
  LANG: C++
  PROG: starry
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
using namespace std;

vector<vector<int>> starfill;
vector<vector<int>> night;
vector<int> maxx, maxy, minx, miny;
vector<bool> used;
vector<vector<int>> shape;
vector<vector<int>> temp;
int lol = (int)'0' - (int)'a';
int h, w;
int n = 0, m = 0;
int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
int dy[] = {0, 1, 0, -1, 1, -1, -1, 1};

void fillshape(int x, int y){
	if(x < 0 || y < 0 || x >= h || y >= w) return;
	if(starfill[x][y] != -1) return;
	starfill[x][y] = n;
	
	maxx[n] = max(maxx[n], x);
	maxy[n] = max(maxy[n], y);
	minx[n] = min(minx[n], x);
	miny[n] = min(miny[n], y);
	
	for(int i = 0; i < 8; i++) fillshape(x + dx[i], y + dy[i]);
	
	return;
}

void copy(){
	shape.resize(temp.size());
	
	for(int i = 0; i < temp.size(); i++){
		shape[i].resize(temp[i].size());
		
		for(int j = 0; j < temp[i].size(); j++){
			shape[i][j] = temp[i][j];
		}
	}
	
	return;
}

void turn(){
	temp.resize(shape[0].size());
	
	for(int i = 0; i < shape[0].size(); i++){
		temp[i].resize(shape.size());
		
		for(int j = 0; j < shape.size(); j++){
			temp[i][j] = shape[shape.size() - 1 - j][i];
		}
	}
	
	copy();
	return;
}

void reflect(){
	temp.resize(shape.size());
	
	for(int i = 0; i < shape.size(); i++){
		temp[i].resize(shape[i].size());
		for(int j = 0; j < shape[i].size(); j++){
			temp[i][j] = shape[i][shape[i].size() - 1 - j];
		}
	}
	
	copy();
	return;
	
}

int main(){
	ifstream fin ("starry.in");
	ofstream fout ("starry.out");
	
	fin >> w >> h;
	starfill.resize(h);
	night.resize(h);
	
	for(int i = 0; i < h; i++){
		starfill[i].resize(w);
		night[i].resize(w);
		char temp[w];
		fin >> temp;
		
		for(int j = 0; j < w; j++){
			if(temp[j] == '0'){
				starfill[i][j] = lol;
				night[i][j] = lol;
			}else{
				starfill[i][j] = -1;
				night[i][j] = -1;
			}
		}
	}
	
	for(int i = 0; i < h; i++){
		for(int j = 0; j < w; j++){
			if(starfill[i][j] == -1){
				maxx.push_back(i);
				maxy.push_back(j);
				minx.push_back(i);
				miny.push_back(j);
				used.push_back(false);
				
				fillshape(i, j);
				n++;
			}
			
			//cout << (char)(starfill[i][j] + 'A') << " ";
		}
		//cout << endl;
	}
	
	/*
	for(int i = 0; i < n; i++){
		cout << miny[i] << " " << minx[i] << " " << maxy[i] << " " << maxx[i] << endl;
	}
	*/
	
	for(int i = 0; i < n; i++){
		if(used[i]) continue;
		shape.resize(maxx[i] - minx[i] + 1);
		
		for(int a = minx[i]; a <= maxx[i]; a++){
			shape[a-minx[i]].resize(maxy[i] - miny[i] + 1);
			
			for(int b = miny[i]; b <= maxy[i]; b++){
				if(starfill[a][b] == i){
					shape[a-minx[i]][b-miny[i]] = m;
					night[a][b] = m;
				}else{
					shape[a-minx[i]][b-miny[i]] = lol;
				}
				
				
			}
		}

		
		for(int j = i + 1; j < n; j++){
			
			bool match = false;
			int sizex = maxx[j] - minx[j] + 1, sizey = maxy[j] - miny[j] + 1;
			
			for(int t = 0; t < 4; t++){
				if(sizex != shape.size() || sizey != shape[0].size()){
					turn();
					continue;
				}
				
				for(int r = 0; r < 2; r++){
					match = true;
					
					for(int a = 0; a < sizex; a++){
						for(int b = 0; b < sizey; b++){
							
							if((shape[a][b] == m && starfill[a + minx[j]][b + miny[j]] != j) || (shape[a][b] != m && starfill[a + minx[j]][b + miny[j]] == j)){
								match = false;
								break;
							}
							
						}
						if(!match) break;
					}
					
					if(match) break;
					
					reflect();
				}
				
				if(match) break;
				
				turn();
			}
			
			
			if(!match) continue;
			
			used[j] = true;
			
			for(int a = 0; a < sizex; a++){
				for(int b = 0; b < sizey; b++){
					
					if(starfill[a + minx[j]][b + miny[j]] == j) night[a + minx[j]][b + miny[j]] = m;
					
				}
			}
			
		}
		
		m++;
	}
	
	
	for(int i = 0; i < h; i++){
		for(int j = 0; j < w; j++){
			fout << (char)(night[i][j] + 'a');
		}
		fout << endl;
	}

	return 0;
}

