/*
  NAME: super_j6
  LANG: C++
  PROG: snail
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

// path pairs are <pathnum, length>;
// q pairs are <direction, <x, <y, <index>>>>;

int dx[] = {1, 0, -1, 0};
int dy[] = {0, 1, 0, -1};

int main(){
	ifstream fin ("snail.in");
	ofstream fout ("snail.out");
	int maxout = 0;
	
	int n, b, maxv = 1;
	fin >> n >> b;
	vector<vector<vector<pair<long long, int>>>> path;
	path.resize(n);
	for(int i = 0; i < n; i++) path[i].resize(n);
	
	for(int i = 0; i < b; i++){
		char xc;
		int x, y;
		fin >> xc;
		fin >> y;
		x--;
		y--;
		x = (int)(xc - 'A');
		
		path[x][y].push_back( make_pair(0, 0) );
	}
	
	path[0][0].push_back( make_pair(2, 1) );
	path[0][0].push_back( make_pair(3, 1) );
	
	queue<pair<int, pair<int, pair<int, int>>>> q;
	
	q.push( make_pair(0, make_pair(0, make_pair(0, 0))) );
	q.push( make_pair(1, make_pair(0, make_pair(0, 1))) );
	
	
	while(!q.empty()){
		pair<int, pair<int, pair<int, int>>> curr = q.front();
		q.pop();
		
		int dir = curr.first, x = curr.second.first, y = curr.second.second.first, index = curr.second.second.second;
		long long pathnum = path[x][y][index].first;
		int length = path[x][y][index].second;
		maxv = max(maxv, length);
		
		//cout << dir << " " << x << " " << y << " " << pathnum << " " << length << endl;
		
		if(pathnum > maxout){
			maxout = pathnum;
			//cout << maxout << endl;
		}
		
		int newx = x + dx[dir], newy = y + dy[dir];
		
		if(newx > 25 && newx < n && dir % 2 == 0){
			
			if(dir == 0){
				newx = n - 1;
				path[newx][newy].push_back( make_pair(pathnum, length + newx - x) );
					
			    q.push( make_pair(dir, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
			}else{
				newx = 26;
				path[newx][newy].push_back( make_pair(pathnum, length + x - newx) );
					
				q.push( make_pair(dir, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
			}
		
		}else{
			bool works = true;
			
			while(works){
					//	cout << dir << " " << x << " " << y << " " << pathnum << " " << length << endl;
				maxv = max(maxv, length);
				
				if(newx < 0 || newy < 0 || newx >= n || newy >= n){
				
					newx  = x + dx[(dir + 1) % 4]; 
					newy  = y + dy[(dir + 1) % 4];
					
					if(newx >= 0 && newy >= 0 && newx < n && newy < n){
						
						if(path[newx][newy].size() > 0){
					
							if(path[newx][newy][0].first != 0){
								
								bool good = true;
								
								for(int i = 0; i < path[newx][newy].size(); i++){
									long long a = pathnum, b = path[newx][newy][i].first;
									while(a > b) a /= 2;
									
									if(a == b){
										good = false;
										break;
									}
								}
								
								if(good){
									path[newx][newy].push_back( make_pair(pathnum * 2, length + 1) );
									
									q.push( make_pair((dir + 1) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
								}
								
							}
							
						}else{
							path[newx][newy].push_back( make_pair(pathnum * 2, length + 1) );
									
							q.push( make_pair((dir + 1) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
								
						}
						
					}
					
					newx  = x + dx[(dir - 1 + 4) % 4]; 
					newy  = y + dy[(dir - 1 + 4) % 4];
					
					if(newx >= 0 && newy >= 0 && newx < n && newy < n){
						
						if(path[newx][newy].size() > 0){
					
							if(path[newx][newy][0].first != 0){
								
								bool good = true;
								
								for(int i = 0; i < path[newx][newy].size(); i++){
									long long a = pathnum, b = path[newx][newy][i].first;
									while(a > b) a /= 2;
									
									if(a == b){
										good = false;
										break;
									}
								}
								
								if(good){
									path[newx][newy].push_back( make_pair(pathnum * 2 + 1, length + 1) );
									
									q.push( make_pair((dir - 1 + 4) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
								}
								
							}
							
						}else{
							path[newx][newy].push_back( make_pair(pathnum * 2 + 1, length + 1) );
									
							q.push( make_pair((dir - 1 + 4) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
								
						}
						
					}
					
					works = false;
					
				}else if(path[newx][newy].size() > 0){
					
					if(path[newx][newy][0].first == 0){
						
						newx  = x + dx[(dir + 1) % 4]; 
						newy  = y + dy[(dir + 1) % 4];
						
						if(newx >= 0 && newy >= 0 && newx < n && newy < n){
							
							if(path[newx][newy].size() > 0){
						
								if(path[newx][newy][0].first != 0){
									
									bool good = true;
									
									for(int i = 0; i < path[newx][newy].size(); i++){
										long long a = pathnum, b = path[newx][newy][i].first;
										while(a > b) a /= 2;
										
										if(a == b){
											good = false;
											break;
										}
									}
									
									if(good){
										path[newx][newy].push_back( make_pair(pathnum * 2, length + 1) );
										
										q.push( make_pair((dir + 1) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
									}
									
								}
								
							}else{
								path[newx][newy].push_back( make_pair(pathnum * 2, length + 1) );
										
								q.push( make_pair((dir + 1) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
									
							}
							
						}
						
						newx  = x + dx[(dir - 1 + 4) % 4]; 
						newy  = y + dy[(dir - 1 + 4) % 4];
						
						
						if(newx >= 0 && newy >= 0 && newx < n && newy < n){
							
							if(path[newx][newy].size() > 0){
						
								if(path[newx][newy][0].first != 0){
									
									bool good = true;
									
									for(int i = 0; i < path[newx][newy].size(); i++){
										long long a = pathnum, b = path[newx][newy][i].first;
										while(a > b) a /= 2;
										
										if(a == b){
											good = false;
											break;
										}
									}
									
									if(good){
										path[newx][newy].push_back( make_pair(pathnum * 2 + 1, length + 1) );
										
										q.push( make_pair((dir - 1 + 4) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
									}
									
								}
								
							}else{
								path[newx][newy].push_back( make_pair(pathnum * 2 + 1, length + 1) );
										
								q.push( make_pair((dir - 1 + 4) % 4, make_pair(newx, make_pair(newy, path[newx][newy].size() - 1))) );
									
							}
							
						}
						
						works = false;
						
					}else{
						
						bool good = true;
						
						for(int i = 0; i < path[newx][newy].size(); i++){
							long long a = pathnum, b = path[newx][newy][i].first;
							while(a > b) a /= 2;
							
							if(a == b){
								good = false;
								works = false;
								break;
							}
						}
						
						if(good){
							path[newx][newy].push_back( make_pair(pathnum, length + 1) );
							
						}
						
					}
					
				}else{
					
					path[newx][newy].push_back( make_pair(pathnum, length + 1) );
							
				}
				
				x = newx;
				y = newy;
				newx = x + dx[dir]; 
				newy = y + dy[dir];
				length++;
			}
		}
	}
	
	fout << maxv << endl;

	return 0;
}