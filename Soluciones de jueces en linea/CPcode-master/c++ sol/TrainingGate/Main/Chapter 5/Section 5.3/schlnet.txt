/*
  NAME: super_j6
  LANG: C++
  PROG: schlnet
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <stack>
using namespace std;

int n;
vector<vector<int>> graph;
vector<vector<int>> tgraph;
vector<bool> visited;
vector<int> number;
stack<int> stk;

void dfsforward(int index){
	visited[index] = true;
	
	for(int i = 0; i < graph[index].size(); i++){
		if(visited[graph[index][i]]) continue;
		dfsforward(graph[index][i]);
	}
	
	stk.push(index);
}

void dfsbackward(int index, int label){
	number[index] = label;
	
	for(int i = 0; i < tgraph[index].size(); i++){
		if(number[tgraph[index][i]] != -1) continue;
		dfsbackward(tgraph[index][i], label);
	}
	
}

int main(){
	ifstream fin ("schlnet.in");
	ofstream fout ("schlnet.out");
	
	int n;
	fin >> n;
	graph.resize(n);
	tgraph.resize(n);
	number.resize(n);
	visited.resize(n);
	
	for(int i = 0; i < n; i++){
		visited[i] = false;
		number[i] = -1;
		int school;
		fin >> school;
		
		while(school != 0){
			school--;
			graph[i].push_back(school);
			tgraph[school].push_back(i);
			fin >> school;
		}
	}
	
	for(int i = 0; i < n; i++){
		if(visited[i]) continue;
		dfsforward(i);
	}
	
	int label = 0;
	
	while(!stk.empty()){
		int index = stk.top();
		stk.pop();
		
		if(number[index] == -1){
			dfsbackward(index, label);	
			label++;
		} 
		
	}
	
	int in[label];
	int out[label];
	for(int i = 0; i < label; i++){
		in[i] = 0;
		out[i] = 0;
	}
 
	for(int i = 0; i < n; i++){
		for(int j = 0; j < tgraph[i].size(); j++){
			if(number[i] != number[tgraph[i][j]]) in[number[i]]++;
		}
 
		for(int j = 0; j < graph[i].size(); j++){
			if(number[i] != number[graph[i][j]]) out[number[i]]++;	
		}
	}
 
	int minv = 0, outs = 0;
 
	for(int i = 0; i < label; i++){
		if(in[i] == 0) minv++;
		if(out[i] == 0) outs++;
	}
 
	int extensions = max(minv, outs);
	if(label == 1) extensions = 0;
 
	fout << minv << endl << extensions << endl;

	return 0;
}