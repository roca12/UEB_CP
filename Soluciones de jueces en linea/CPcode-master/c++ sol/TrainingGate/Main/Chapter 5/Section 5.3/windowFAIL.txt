/*
  NAME: super_j6
  LANG: C++
  PROG: window
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <queue>
#include <math.h>
#include <iomanip>
using namespace std;

ifstream fin ("window.in");
ofstream fout ("window.out");

struct window{
	char I;
	int x, y, X, Y;
	
	window(char I, int x, int y, int X, int Y){
		this->I = I;
		this->x = x;
		this->y = y;
		this->X = X;
		this->Y = Y;
	}
};

vector<window> windows;

void w(){
	char I;
	int x, y, X, Y;
	fin.ignore(1);
	fin >> I;
	fin.ignore(1);
	fin >> x;
	fin.ignore(1);
	fin >> y;
	fin.ignore(1);
	fin >> X;
	fin.ignore(1);
	fin >> Y;
	fin.ignore(1);
	
	int bx = min(x, X), by = min(y, Y), tX = max(x, X), tY = max(y, Y);
	
	windows.insert(windows.begin(), window(I, bx, by, tX, tY));
	
}

void t(){
	char I;
	fin.ignore(1);
	fin >> I;
	fin.ignore(1);
	
	for(int i = 0; i < windows.size(); i++){
		if(windows[i].I == I){
			window temp = windows[i];
			windows.erase(windows.begin()+i);
			windows.insert(windows.begin(), temp);
			return;
		}
	}
	
	cout << "error";
}

void b(){
	char I;
	fin.ignore(1);
	fin >> I;
	fin.ignore(1);
	
	for(int i = 0; i < windows.size(); i++){
		if(windows[i].I == I){
			window temp = windows[i];
			windows.erase(windows.begin()+i);
			windows.push_back(temp);
			return;
		}
	}
	
	cout << "error";
}

void d(){
	char I;
	fin.ignore(1);
	fin >> I;
	fin.ignore(1);
	
	for(int i = 0; i < windows.size(); i++){
		if(windows[i].I == I){
			window temp = windows[i];
			windows.erase(windows.begin()+i);
			return;
		}
	}
	
	cout << "error";
}

bool intersect(vector<int> rects){
	int x = 0, y = 0, X = 33000, Y = 33000;
	
	for(int i = 0; i < rects.size(); i++){
		window a = windows[rects[i]];
		
		if(a.x > X || a.X < x || a.y > Y || a.Y < y) return false;
		x = max(x, a.x);
		y = max(y, a.y);
		X = min(X, a.X);
		Y = min(Y, a.Y);
	}
	
	return true;
}

long intersectarea(vector<int> rects){
	int x = 0, y = 0, X = 33000, Y = 33000;
	
	for(int i = 0; i < rects.size(); i++){
		window a = windows[rects[i]];
		
		x = max(x, a.x);
		y = max(y, a.y);
		X = min(X, a.X);
		Y = min(Y, a.Y);
	}
	
	return (long)(X - x) * (long)(Y - y);
}

void s(){
	char I;
	fin.ignore(1);
	fin >> I;
	fin.ignore(1);
	
	int show;
	
	for(int i = 0; i < windows.size(); i++){
		if(windows[i].I == I){
			show = i;
			break;
		}
	}
	
	long totalarea = (windows[show].X - windows[show].x) * (windows[show].Y - windows[show].y);
	long area = 0;
	
	queue<vector<int>> used;
	
	vector<int> first;
	first.push_back(show);
	used.push(first);
	
	int maxv = 0;
	
	while(!used.empty()){
		vector<int> curr = used.front();
		used.pop();
		
		area += intersectarea(curr) * pow(-1, curr.size() - 1);
		maxv = max(maxv, (int)curr.size() - 1);
		
		for(int i = 0; i < curr[curr.size() - 1]; i++){
			vector<int> temp = curr;
			temp.push_back(i);
			
			if(intersect(temp)) used.push(temp);
		}
	}
	
	double percent = (100 * ((double)area / (double)totalarea));
	
	fout << percent << endl;
	
}

int main(){
	
	fout << fixed;
	fout << setprecision(3);
	
	char task;
	
	while(fin >> task){
		if(task == 'w') w();
		if(task == 't') t();
		if(task == 'b') b();
		if(task == 'd') d();
		if(task == 's') s();
	}
	
	return 0;
}