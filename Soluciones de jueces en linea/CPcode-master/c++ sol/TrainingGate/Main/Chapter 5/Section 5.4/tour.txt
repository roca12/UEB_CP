/*
  NAME: super_j6
  LANG: C++
  PROG: tour
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
using namespace std;

int n, v;
vector<vector<bool>> graph;
vector<vector<int>> dp;
map<string, int> city;

int main(){
	ifstream fin ("tour.in");
	ofstream fout ("tour.out");

	fin >> n >> v;
	graph.resize(n);
	dp.resize(n);
	
	for(int i = 0; i < n; i++){
		string a;
		fin >> a;
		city[a] = i;
		
		dp[i].resize(n);
		graph[i].resize(n);
		for(int j = 0; j < n; j++){
			dp[i][j] = 0;
			graph[i][j] = false;
		} 
		
	}
	
	for(int i = 0; i < v; i++){
		string sa, sb;
		fin >> sa >> sb;
		int a = min(city.find(sa)->second, city.find(sb)->second),b = max(city.find(sa)->second, city.find(sb)->second);
		
		graph[a][b] = true;
	}
	
	dp[0][0] = 1;
	
	for(int i = 0; i < n; i++){
		for(int j = i + 1; j < n; j++){
			for(int k = 0; k < j; k++){
				if(graph[k][j] && dp[i][k] > 0){
					dp[i][j] = max(dp[i][k] + 1, dp[i][j]);
				}
			}
			
			dp[j][i] = dp[i][j];
		}
	}
	
	for(int k = 0; k < n - 1; k++){
		if(graph[k][n - 1] && dp[n - 1][k] > 0){
			dp[n - 1][n - 1] = max(dp[n - 1][k], dp[n - 1][n - 1]);
		}
	}
	
	int maxv = max(dp[n - 1][n - 1], 1);
	
	fout << maxv << endl;

	return 0;
}