/*
  NAME: super_j6
  LANG: C++
  PROG: tour
*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <map>
#include <string>
#include <vector>
using namespace std;

int n, v;
vector<vector<int>> graph;
vector<bool> visited;
map<string, int> city; 
int maxv = 1;

bool answer(int a, int b){
	if(a == n - 1 && b == n - 1){ 
		visited[n - 1] = true;
		
		int output = 0;
	
		for(int i = 0; i < n; i++){
			if(visited[i]) output++;
		}
		
		maxv = max(output, maxv);
		
		return true;
	}
	
	bool works = false;
	
	if(a <= b){
		
		for(int i = 0; i < graph[a].size(); i++){
			int next = graph[a][i];
			if(!visited[next]){
				if(next != n - 1) visited[next] = true;
				if(answer(next, b)){
					works = true;
				}
					visited[next] = false;
			}
		}
		
	}else{
		
		for(int i = 0; i < graph[b].size(); i++){
			int next = graph[b][i];
			if(!visited[next]){
				if(next != n - 1) visited[next] = true;
				if(answer(a, next)){
					works = true;
				}
				visited[next] = false;
			}
		}
		
	}
	
	if(works) return true;
	return false;
	
}

int main(){
	ifstream fin ("tour.in");
	ofstream fout ("tour.out");

	fin >> n >> v;
	graph.resize(n);
	visited.resize(n);
	
	for(int i = 0; i < n; i++){
		string a;
		fin >> a;
		city[a] = i;
		
		visited[i] = false;
	}
	
	for(int i = 0; i < v; i++){
		string sa, sb;
		fin >> sa >> sb;
		int a = min(city.find(sa)->second, city.find(sb)->second),b = max(city.find(sa)->second, city.find(sb)->second);
		
		graph[a].push_back(b);
	}
	
	visited[0] = true;
	
	bool temp = answer(0, 0);
	
	
	fout << maxv << endl;

	return 0;
}