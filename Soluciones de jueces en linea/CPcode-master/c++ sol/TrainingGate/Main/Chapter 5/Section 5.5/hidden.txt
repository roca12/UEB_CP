/*
  NAME: super_j6
  LANG: C++
  PROG: hidden
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
#define endl '\n'

struct suffix{
	int index;
	int rank[2];
};

int cmp(suffix a, suffix b){
	return (a.rank[0] == b.rank[0]) ? (a.rank[1] < b.rank[1]) : (a.rank[0] < b.rank[0]);
}

int *suffixArray(string s, int n){ 
	suffix suffixes[n];
	
	for(int i = 0; i < n; i++){
		suffixes[i].index = i;
		suffixes[i].rank[0] = s[i] - 'a';
		suffixes[i].rank[1] = s[(i + 1) % n] - 'a';
	}
	
	stable_sort(suffixes, suffixes+n, cmp);
	
	int ind[n];
	
	for(int k = 2; k < n; k+=k){
		int rank = 0;
		int prev_rank = suffixes[0].rank[0];
		suffixes[0].rank[0] = 0;
		ind[suffixes[0].index] = 0;
		
		for(int i = 1; i < n; i++){
			if(suffixes[i].rank[0] != prev_rank || suffixes[i].rank[1] != suffixes[i - 1].rank[1]){
				rank++;
			}
			prev_rank = suffixes[i].rank[0];
			suffixes[i].rank[0] = rank;
			ind[suffixes[i].index] = i;
		}
		
		for(int i = 0; i < n; i++){
			int nextindex = (suffixes[i].index + k) % n;
			suffixes[i].rank[1] = (nextindex < n) ? suffixes[ind[nextindex]].rank[0] : -1;
		}		
		
		stable_sort(suffixes, suffixes+n, cmp);
	}
	
	int *a = new int[n];
	
	for(int i = 0; i < n; i++){
		a[i] = suffixes[i].index;
	}
	
	return a;
}

int main(){
	freopen("hidden.in", "r", stdin);
	freopen("hidden.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int l;
	cin >> l;
	
	string s;
	s.reserve(l);

	string temp;
	temp.reserve(72);
	
	for(int i = 0; i < (l + 71) / 72; i++){
		cin >> temp;
		s += temp;
	}
	
	int *a = suffixArray(s, l);
	
	cout << a[0] << endl;

	return 0;
}