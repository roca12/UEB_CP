/*
  NAME: super_j6
  LANG: C++
  PROG: picture
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <vector>
using namespace std;
#define endl '\n'

struct rect{
	int x1, y1, x2, y2;
	
	rect(int x1, int y1, int x2, int y2){
		this->x1 = x1;
		this->y1 = y1;
		this->x2 = x2;
		this->y2 = y2;
	}
	
	int p(){
		return 2 * ((x2- x1) + (y2 - y1));
	}
	
	rect newrect(rect other){
		return rect(max(x1, other.x1), max(y1, other.y1), min(x2, other.x2), min(y2, other.y2));
	}
	
	bool combine(rect other){
		if(x1 > other.x2 || other.x1 > x2 || y1 > other.y2 || other.y1 > y2) return false;
		if(newrect(other).p() <= 0) return false;
		return true;
	}
};

int n;
vector<rect> rec;

int recur(rect cur, int index, int multiplier){
	int total = cur.p() * multiplier;

	if(multiplier == -1) return total;
	
	for(int i = index + 1; i < n; i++){
		if(cur.combine(rec[i])) total += recur(cur.newrect(rec[i]), i, multiplier * -1);
	}
	
	return total;
}

int main(){
	freopen("picture.in", "r", stdin);
	freopen("picture.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int total = 0;
	cin >> n;
	queue<pair<rect, pair<int, int>>> q;
	
	for(int i = 0; i < n; i++){
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		rec.push_back(rect(x1, y1, x2, y2));
	}
	
	for(int i = 0; i < n; i++) total += recur(rec[i], i, 1);

	cout << total << endl;

	return 0;
}