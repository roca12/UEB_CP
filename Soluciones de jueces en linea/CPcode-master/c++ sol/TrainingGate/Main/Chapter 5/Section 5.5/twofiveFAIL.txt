/*
  NAME: super_j6
  LANG: C++
  PROG: twofive
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <string>
using namespace std;
#define endl '\n'

int dp[6][6][6][6][6];
int start[5] = {5, 5, 5, 5, 5};

int getdp(int array[5]){
	return dp[array[0]][array[1]][array[2]][array[3]][array[4]];
}

string Nrecur(int array[5], int cur, int num){
	for(int i = 4; i >= 0; i--){
		if(i == 0 && array[i] == 0){
			return "";
		}else if(array[i] == 0 || array[i] == array[i + 1]){
			continue;
		}
		
		array[i]--;
		if(cur + getdp(array) > num) return (char)(4 - i + '0') + Nrecur(array, cur, num);
		cur += getdp(array);
		array[i]++;
	}
}

int Wrecur(int array[5], int cur, int order[25], int index){
	for(int i = 4; i >= 0; i--){
		if(i == 0 && array[i] == 0){
			return cur;
		}else if(array[i] == 0 || array[i] == array[i + 1]){
			continue;
		}
		
		array[i]--;
		if(4 - i == order[index]) return Wrecur(array, cur, order, index+1);
		cur += getdp(array);
		array[i]++;
	}
}

void N(){
	int n;
	cin >> n;
	
	n--;
	
	string order = Nrecur(start, 0, n);
	
	char out[5][5];
	int count[5] = {0, 0, 0, 0, 0};
	
	for(int i = 0; i < 25; i++){
		int j = order[i] - '0';
		out[j][count[j]] = i + 'A';
		count[j]++;
	}
	
	for(int i = 0; i < 5; i++) for(int j = 0; j < 5; j++) cout << out[i][j];
	cout << endl;
}

void W(){
	string w;
	cin >> w;
	
	int order[25];
	
	for(int i = 0; i < 25; i++) order[w[i] - 'A'] = i / 5;
	
	cout << Wrecur(start, 0, order, 0) + 1 << endl;
}

int main(){
	freopen("twofive.in", "r", stdin);
	freopen("twofive.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	for(int a = 0; a <= 5; a++)
	for(int b = 0; b <= a; b++)
	for(int c = 0; c <= b; c++)
	for(int d = 0; d <= c; d++)
	for(int e = 0; e <= d; e++){
		if(a == 0) dp[a][b][c][d][e]= 1;
		if(a > 0) dp[a][b][c][d][e] = 0;
		if(a > b) dp[a][b][c][d][e] += dp[a - 1][b][c][d][e];
		if(b > c) dp[a][b][c][d][e] += dp[a][b - 1][c][d][e];
		if(c > d) dp[a][b][c][d][e] += dp[a][b][c - 1][d][e];
		if(d > e) dp[a][b][c][d][e] += dp[a][b][c][d - 1][e];
		if(e > 0) dp[a][b][c][d][e] += dp[a][b][c][d][e - 1];
	}
	
	char c;
	cin >> c;
	
	if(c == 'N'){
		N();
	}else{
		W();
	}

	return 0;
}