/*
  NAME: super_j6
  LANG: C++
  PROG: cowxor
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
using namespace std;
#define endl '\n'

struct trie{
	int end = -2;
	trie *child[2] = {NULL, NULL};
};

trie *root = new trie;

void insert(int bin[21], int index){
	trie *crawl = root;
	
	for(int i = 0; i < 21; i++){
		if(crawl->child[bin[i]] == NULL){
			crawl->child[bin[i]] = new trie;
		}
		
		crawl = crawl->child[bin[i]];
	}
	
	crawl->end = index + 1;
}

pair<int, int> findBest(int bin[21]){
	int xres = 0;
	trie *crawl = root;
	
	for(int i = 0; i < 21; i++){
		xres <<= 1;
		if(crawl->child[!bin[i]] == NULL){
			crawl = crawl->child[bin[i]];
		}else{
			crawl = crawl->child[!bin[i]];
			xres++;
		}
	}
	
	return make_pair(xres, crawl->end);
}

int main(){
	freopen("cowxor.in", "r", stdin);
	freopen("cowxor.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int n;
	cin >> n;
	
	int bestx = -1, bests = -1, beste = -1;
	
	int xbin[21];
	for(int i = 0; i < 21; i++) xbin[i] = 0;
	
	insert(xbin, -1);
	
	for(int i = 0; i < n; i++){
		int c;
		cin >> c;
		
		for(int j = 20; j >= 0; j--){
			xbin[j] = xbin[j] ^ (c & 1);
			c >>= 1;
		}
		
		pair<int, int> bestc = findBest(xbin);
		if(bestc.first > bestx){
			bestx = bestc.first;
			bests = bestc.second;
			beste = i;
		}
		
		insert(xbin, i);
	} 
	
	cout << bestx << " " << (bests + 1) << " " << (beste + 1) << endl;

	return 0;
}