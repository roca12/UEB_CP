/*
  NAME: super_j6
  LANG: C++
  PROG: rect1
*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <math.h>
using namespace std;
#define endl '\n'

int colors[2500];

struct window{
	int I;
	int x, y, X, Y;
	
	window(int I, int x, int y, int X, int Y){
		this->I = I;
		this->x = x;
		this->y = y;
		this->X = X;
		this->Y = Y;
	}
};

vector<window> windows;

bool intersect(window a, window b){
	if(a.x >= b.X || a.X <= b.x || a.y >= b.Y || a.Y <= b.y) return false;
	return true;
}

int w(window win, int index, int i){
	if(i == index) return (win.X - win.x) * (win.Y - win.y);
	
	if(!intersect(windows[i], win)) return w(win, index, i - 1);
	
	int res = 0;

	if(win.x < windows[i].x){
		res += w(window(win.I, win.x, win.y, windows[i].x, win.Y), index, i - 1);
	}
		
	if(win.X > windows[i].X){
		res += w(window(win.I, windows[i].X, win.y, win.X, win.Y), index, i - 1);
	}
	
	if(win.y < windows[i].y){
		res += w(window(win.I, max(win.x, windows[i].x), win.y, min(win.X, windows[i].X), windows[i].y), index, i - 1);
	}
	
	if(win.Y > windows[i].Y){
		res += w(window(win.I, max(win.x, windows[i].x), windows[i].Y, min(win.X, windows[i].X), win.Y), index, i - 1);
	}
	
	return res;
	
}

int main(){
	freopen("rect1.in", "r", stdin);
	freopen("rect1.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int a, b, n;
	cin >> a >> b >> n;
	
	windows.reserve(10000);
	windows.push_back(window(0, 0, 0, a, b));
	
	for(int i = 0; i < n; i++){
		int x, y, X, Y, I;
		cin >> x >> y >> X >> Y >> I;
		I--;
		windows.push_back(window(I, x, y, X, Y));
	}
	
	for(int i = 0; i < 2500; i++) colors[i] = 0;
	
	for(int i = 0; i < windows.size(); i++){
		colors[windows[i].I] += w(windows[i], i, windows.size() - 1);
	}
	
	for(int i = 0; i < 2500; i++){
		if(colors[i] > 0) cout << (i + 1) << " " << colors[i] << endl;
	}
	
	return 0;
}