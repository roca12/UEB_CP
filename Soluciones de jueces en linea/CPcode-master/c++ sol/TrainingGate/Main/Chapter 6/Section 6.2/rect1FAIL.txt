/*
  NAME: super_j6
  LANG: C++
  PROG: rect1
*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <math.h>
using namespace std;
#define endl '\n'

vector<int> colors[2500];
int c = 0;

struct window{
	int I;
	int x, y, X, Y;
	
	window(int I, int x, int y, int X, int Y){
		this->I = I;
		this->x = x;
		this->y = y;
		this->X = X;
		this->Y = Y;
	}
};

vector<window> windows;

void w(int I, int x, int y, int X, int Y){
	windows.push_back(window(I, x, y, X, Y));
}

bool intersect(window a, window b){
	if(a.x >= b.X || a.X <= b.x || a.y >= b.Y || a.Y <= b.y) return false;
	return true;
}

long intersectarea(window w){
	return (long)(w.X - w.x) * (long)(w.Y - w.y);
}

window newwin(window a, window b){
	return window(-1, max(a.x, b.x), max(a.y, b.y), min(a.X, b.X), min(a.Y, b.Y));
}

long s(int I){
	int show = I;
	
	long area = 0;
	
	queue<pair<window, pair<int, int>>> used;

	used.push(make_pair(windows[show], make_pair(show, 1)));
	
	while(!used.empty()){
		window cur = used.front().first;
		int index = used.front().second.first, multiplier = used.front().second.second;
		used.pop();
		
		area += intersectarea(cur) * multiplier;
		
		for(int i = index + 1; i < windows.size(); i++){
			if(intersect(cur, windows[i])) used.push(make_pair(newwin(cur, windows[i]), make_pair(i, multiplier * -1)));
		}
	}
	
	return area;
}

int main(){
	freopen("rect1.in", "r", stdin);
	freopen("rect1.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	int a, b, n;
	cin >> a >> b >> n;
	
	w(c, 0, 0, a, b);
	colors[0].push_back(c);
	c++;
	
	for(int i = 0; i < n; i++){
		int x, y, X, Y, col;
		cin >> x >> y >> X >> Y >> col;
		col--;
		w(c, x, y, X, Y);
		colors[col].push_back(c);
		c++;
	}
	
	for(int i = 0; i < 2500; i++){
		long area = 0;
		for(int j = 0; j < colors[i].size(); j++) area += s(colors[i][j]);
		if(area > 0) cout << (i + 1) << " " << area << endl;
	}
	
	return 0;
}