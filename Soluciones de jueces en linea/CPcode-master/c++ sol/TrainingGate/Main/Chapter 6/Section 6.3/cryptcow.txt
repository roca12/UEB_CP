/*
  NAME: super_j6
  LANG: C++
  PROG: cryptcow
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <string.h>
#include <unordered_map>
using namespace std;
#define endl '\n'

string f = "Begin the Escape execution at the Break of Dawn", g;
unordered_map<string, int> used;

int ok(){
	int cnt[128];
	memset(cnt, 0, sizeof(cnt));
	
	for(int i = 0; i < g.size(); i++) cnt[g[i]]++;
	for(int i = 0; i < f.size(); i++) cnt[f[i]]--;
	
	for(int i = 0; i < 128; i++){
		if(i == 'C' || i == 'O' || i == 'W') continue;
		if(cnt[i] != 0) return -1;
	}
	
	if(cnt['C'] != cnt['O'] || cnt['O'] != cnt['W']) return -1;
	
	return cnt['C'];
}

int kmp(string f, string cur){
	if(cur.size() == 0) return -2;
	
	//
		int t[cur.size() + 1];
		t[0] = -1;
		
		int pos = 1, cnd = 0;
		while(pos < cur.size()){
			if(cur[pos] == cur[cnd]){
				t[pos] = t[cnd];
			}else{
				t[pos] = cnd;
				cnd = t[cnd];
				while(cnd >= 0 && cur[pos] != cur[cnd]){
					cnd = t[cnd];
				}
			}
			pos++;
			cnd++;
		}
		t[pos] = cnd;
	//
	
	int np = 0, j = 0, k = 0;
	int i = -1;
	
	while(j < f.size()){
		if(cur[k] == f[j]){
			j++;
			k++;
			if(k == cur.size()){
				if(i == -1){
					i = j - k;
				}else{
					return -2;
				}
			}
		}else{
			k = t[k];
			if(k < 0){
				j++;
				k++;
			}
		}
	}
	
	return i;
}


bool testok(string &f, string &g, char &nx){
	string cur;
	
	for(int i = 0; i <= g.size(); i++){
		if(i == g.size() || g[i] == 'C' || g[i] == 'O' || g[i] == 'W'){
			int x = kmp(f, cur);
			
			if(x >= 0 && cur.size() > 1){
				f.erase(x, cur.size());
				f.insert(x, string(1, nx));
				
				i -= cur.size();
				
				g.erase(i, cur.size());
				g.insert(i, string(1, nx));
				
				nx++;
				i++;
			}else if(x == -1){
				return 0;
			}
			
			cur = "";
		}else{
			cur += g[i];
		}
	}
	
	return 1;
}

bool search(string f, string g, char nx){
	for(int i = 0; i < 2; i++){
		int ind = 0;
		
		while(ind < g.size() && g[ind] != (i == 0 ? 'C' : 'W')){
			if(g[ind] != f[ind]) return 0;
			ind++;
		}
		
		f.erase(0, ind);
		g.erase(0, ind);
		reverse(f.begin(), f.end());
		reverse(g.begin(), g.end());
	}
	
	if(g.size() == 0) return 1;
	if(!testok(f, g, nx) || used[g]) return 0;
	
	used[g] = 1;
	
	for(int i = 0; i < g.size(); i++) if(g[i] == 'C'){
		for(int j = i + 1; j < g.size(); j++) if(g[j] == 'O'){
			for(int k = j + 1; k < g.size(); k++) if(g[k] == 'W'){
				string temp = g.substr(0, i) + g.substr(j + 1, k - j - 1) + g.substr(i + 1, j - i - 1) + g.substr(k + 1, g.size() - k - 1);
				if(search(f, temp, nx)) return 1;
			}
		}	
	}
	
	return 0;
}

int main(){
	freopen("cryptcow.in", "r", stdin);
	freopen("cryptcow.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	getline(cin, g);
	
	int z = ok();
	
	if(z != -1 && search(f, g, '!')){
		cout << 1 << " " << z << endl;
	}else{
		cout << 0 << " " << 0 << endl;
	}

	return 0;
}