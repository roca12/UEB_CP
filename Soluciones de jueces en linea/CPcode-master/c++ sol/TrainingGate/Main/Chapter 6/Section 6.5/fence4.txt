/*
  NAME: super_j6
  LANG: C++
  PROG: fence4
*/

#include <iostream>
#include <cstdio>
#include <algorithm>
#include <math.h>
#include <vector>
using namespace std;
#define endl '\n'

struct pt{
	long x, y;
	
	friend pt operator+(pt a, pt b){
		return (pt){a.x + b.x, a.y + b.y};
	}
	
	friend pt operator-(pt a, pt b){
		return (pt){a.x - b.x, a.y - b.y};
	}
	
	friend pt operator*(pt a, long b){
		return (pt){a.x * b, a.y * b};
	}
};

struct line{
	double r1, r2;
};

int test(long long x){
	if(x == 0) return 0;
	if(x > 0) return 1;
	return -1;
}

int cp(pt a, pt b, pt c = (pt){0, 0}){
	pt v1 = a - c, v2 = b - c;
	return test(v1.x * v2.y - v1.y * v2.x);
}

long dot(pt a, pt b, pt c = (pt){0, 0}){
	pt v1 = a - c, v2 = b - c;
	return v1.x * v2.x + v1.y * v2.y;
}

bool onseg(pt a, pt b, pt c){
	if(sqrt(dot(a, a, b)) == sqrt(dot(a, a, c)) + sqrt(dot(b, b, c))) return 1;
	return 0;
}

bool cross(pt a, pt b, pt c, pt d = (pt){0, 0}){
	return (cp(a, b, c) * cp(a, b, d) < 0 && cp(c, d, a) * cp(c, d, b) < 0);
}

const double pi = 3.141592;
int n;
pt p;
pt a[200];
line l[200];

int main(){
	freopen("fence4.in", "r", stdin);
	freopen("fence4.out", "w", stdout);
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	
	cin >> n;
	cin >> p.x >> p.y;
	
	for(int i = 0; i <= n; i++){
		if(i < n){
			cin >> a[i].x >> a[i].y;
			a[i] = a[i] - p;
		}
		
		if(i > 0){
			double r2 = fmod(atan2(a[i % n].y, a[i % n].x) + 2 * pi, 2 * pi);
			double r1 = fmod(atan2(a[i - 1].y, a[i - 1].x) + 2 * pi, 2 * pi);
			
			if(fmod(r2 - r1 + 2 * pi, 2 * pi) > pi) swap(r1, r2);
			
			l[i - 1] = (line){r1, r2};
		}
	}
	
	for(int i = 0; i < n; i++){
		for(int j = i + 1; j < n; j++){
			bool works = 1;
			
			if(cross(a[i], a[(i + 1) % n], a[j], a[(j + 1) % n])) works = 0;

			if(j - i != 1){
				if(onseg(a[i], a[(i + 1) % n], a[j])) works = 0;
				if(onseg(a[j], a[(j + 1) % n], a[(i + 1) % n])) works = 0;
			}
			if(j - i != n - 1){
				if(onseg(a[j], a[(j + 1) % n], a[i])) works = 0;
				if(onseg(a[i], a[(i + 1) % n], a[(j + 1) % n])) works = 0;
			}
			
			if(!works){
				cout << "NOFENCE" << endl;
				return 0;
			}
		}
	}
	
	for(int k = 0; k < n / 2; k++){
		for(int i = 0; i < n; i++){
			if(fmod(l[i].r2 - l[i].r1 + 2 * pi, 2 * pi) > pi) continue;
			
			for(int j = 0; j < n; j++){
				if(i == j || fmod(l[j].r2 - l[j].r1 + 2 * pi, 2 * pi) > pi) continue;

				
				pt s = (a[(i + 1) % n] - a[i]) * (abs(p.x) == 10 ? 10 : 2);
				if(!cross(a[i] - s, a[i] + s, a[j]) && !cross(a[i] - s, a[i] + s, a[(j + 1) % n])) continue;

				if(fmod(l[j].r1 - l[i].r1 + 2 * pi, 2 * pi) < fmod(l[i].r2 - l[i].r1 + 2 * pi, 2 * pi)){
					l[j].r1 = l[i].r2;
				}
				
				if(fmod(l[j].r2 - l[i].r1 + 2 * pi, 2 * pi) < fmod(l[i].r2 - l[i].r1 + 2 * pi, 2 * pi)){
					l[j].r2 = l[i].r1;
				}
			}
		}
	}
	
	vector<pair<int, int>> ans;
	
	for(int i = 0; i < n; i++){
		a[i] = a[i] + p;
		
		if(fmod(l[i].r2 - l[i].r1 + 2 * pi - 0.0001, 2 * pi) < pi){
			ans.push_back(make_pair(max(i, (i + 1) % n), min(i, (i + 1) % n)));
		}
	}
	
	sort(ans.begin(), ans.end());
	
	cout << ans.size() << endl;
	
	for(int i = 0; i < ans.size(); i++){
		cout << a[ans[i].second].x << " " << a[ans[i].second].y << " " << a[ans[i].first].x << " " << a[ans[i].first].y << endl;
	}

	return 0;
} 