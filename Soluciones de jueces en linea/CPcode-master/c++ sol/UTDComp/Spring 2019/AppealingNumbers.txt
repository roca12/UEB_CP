#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

vector<int> favs;

bool bitset(int n, int k){
	if(n >> (k - 1) & 1) return true;
	return false;
}

int binary(int minv, int maxv, int bit){
	int middle = (minv + maxv) / 2;
	
	if(!bitset(favs[middle], bit) && bitset(favs[middle + 1], bit)){
		return middle + 1;
	}
	
	if(bitset(favs[middle], bit )){
		return binary(minv, middle, bit);
	}
	
	return binary(middle, maxv, bit);
}

int best(int num, int minv, int maxv, int bit){
	
	if(minv == maxv) return minv;
	
	if(bitset(favs[minv], bit) || !bitset(favs[maxv], bit)){
		return best(num, minv, maxv, bit - 1);
	}
	
	int split = binary(minv, maxv, bit);
	
	if(bitset(num, bit)) return best(num, minv, split - 1, bit - 1);
	
	return best(num, split, maxv, bit - 1);
}

int main() {
	
	int n, m;
	cin >> n >> m;
	
	favs.resize(n);
	for(int i = 0; i < n; i++) cin >> favs[i];
	sort(favs.begin(), favs.end());
	
	for(int i = 0; i < m; i++){
		int num;
		cin >> num;
		
		cout << favs[best(num, 0, favs.size() - 1, 31)] << endl;
	}
	
	return 0;
}