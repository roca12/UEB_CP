/*
NAME: super_j6
LANG: JAVA
PROG: camelot
*/


import java.lang.*;
import java.io.*;
import java.util.*;

class camelot{
  public static int[][][][] board;
  public static int[][] kingBoard;
  public static Queue<Integer> pq = new LinkedList<>();

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("camelot.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("camelot.out")));
    StringTokenizer st = new StringTokenizer(f.readLine());

    int r = Integer.parseInt(st.nextToken()), c = Integer.parseInt(st.nextToken());

    int[] king = new int[2];

    st = new StringTokenizer(f.readLine());

    king[0] = (int)(st.nextToken().charAt(0) - 'A');
    king[1] = Integer.parseInt(st.nextToken()) - 1;

    String line;

    ArrayList<Integer> knightstuff = new ArrayList<>();

    while((line = f.readLine()) != null){
      st = new StringTokenizer(line);
      while(st.hasMoreTokens()){
        knightstuff.add((int)(st.nextToken().charAt(0) - 'A'));
        knightstuff.add(Integer.parseInt(st.nextToken()) - 1);
      }
    }

    int[][] knight = new int[knightstuff.size() / 2][2];

    //System.out.println(Arrays.toString(king));
    //System.out.println();

    for(int i = 0; i < knightstuff.size(); i+=2){

      knight[i/2][0] = knightstuff.get(i);
      knight[i/2][1] = knightstuff.get(i + 1);

    
      //System.out.println(Arrays.toString(knight[i/2]));
    }

    board = new int[c][r][c][r];

    int min = Integer.MAX_VALUE;

    for(int i = 0; i < c; i++){
      for(int j = 0; j < r; j++){

        for(int a = 0; a < c; a++){
          for(int b = 0; b < r; b++){
            board[i][j][a][b] = 10000;
          }
        }

        pq.add(j << 5 | i);


        while(pq.peek() != null){
          int skeet = pq.poll();

          int x = skeet & 31;
          skeet >>= 5;
          int y = skeet & 31;
          skeet >>= 5; 
          int cost = skeet;

          if(board[i][j][x][y] > cost){
            board[i][j][x][y] = cost;
            cost += 1;

            if(x - 2 >= 0){
              if(y + 1 < r){
                pq.add(cost << 10 | (y + 1) << 5 | (x - 2));
              }

              if(y - 1 >= 0){
                pq.add(cost << 10 | (y - 1) << 5 | (x - 2));
              }
            }

            if(y - 2 >= 0){
              if(x + 1 < c){
                pq.add(cost << 10 | (y - 2) << 5 | (x + 1));
              }

              if(x - 1 >= 0){
                pq.add(cost << 10 | (y - 2) << 5 | (x - 1));
              }
            }

            if(x + 2 < c){
              if(y + 1 < r){
                pq.add(cost << 10 | (y + 1) << 5 | (x + 2));
              }

              if(y - 1 >= 0){
                pq.add(cost << 10 | (y - 1) << 5 | (x + 2));
              }
            }

            if(y + 2 < r){
              if(x + 1 < c){
                pq.add(cost << 10 | (y + 2) << 5 | (x + 1));
              }

              if(x - 1 >= 0){
                pq.add(cost << 10 | (y + 2) << 5 | (x - 1));
              }
            }

          }
        }

      }
    }

    kingBoard = new int[c][r];

    for(int i = 0; i < c; i++){
      for(int j = 0; j < r; j++){
        kingBoard[i][j] = Math.max(Math.abs(i - king[0]), Math.abs(j - king[1]));
      }
    }

    //for(int i = 0; i < c; i++){
     //if(c > 2) System.out.println(Arrays.toString(kingBoard[i]));
    //}

    for(int i = 0; i < c; i++){
      for(int j = 0; j < r; j++){

        int add = 0;

        int bad = 0;

        for(int d = 0; d < knight.length; d++){

          add += board[i][j][knight[d][0]][knight[d][1]];
        }
        
        for(int a = 0; a < c; a++){
          for(int b = 0; b < r; b++){

            if(kingBoard[a][b] > 2) continue;
            
            for(int d = 0; d < knight.length; d++){

              min = Math.min(min, add - board[i][j][knight[d][0]][knight[d][1]] + kingBoard[a][b] + board[a][b][knight[d][0]][knight[d][1]] + board[i][j][a][b]);

            }

          }
        }
 
      }
    }

    if(knight.length == 0) min = 0;

    out.println(min);

    out.close();
  }

}