/*
NAME: super_j6
LANG: JAVA
PROG: castle
*/

import java.io.*;
import java.util.*;
import java.lang.*;

class castle{
  public static Integer[][] floor, rooms;
  public static int current = 0, counter;
  public static HashMap<Integer, Integer> sizes = new HashMap<>();

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("castle.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("castle.out")));
    StringTokenizer st = new StringTokenizer(f.readLine());

    int width = Integer.parseInt(st.nextToken()), height = Integer.parseInt(st.nextToken());
    floor = new Integer[height][width];
     rooms = new Integer[height][width]; 

    for(int i = 0; i < floor.length; i++){
      st = new StringTokenizer(f.readLine());
      for(int j = 0; j < floor[i].length; j++){
        floor[i][j] = Integer.parseInt(st.nextToken());
      }
    }

    for(int i = 0; i < rooms.length; i++){
      for(int j = 0; j < rooms[i].length; j++){
        if(rooms[i][j] == null){
          current += 1;
          rooms[i][j] = -2;
          counter = 0;
          findLayout();
        }
      }
    }

    out.println(current);

    for(int i = 0; i < rooms.length; i++){
      System.out.println(Arrays.toString(rooms[i]));
    }

    System.out.println();

    int largest = 0;

    for (int i = 1; i <= current; i++) {
      if(sizes.get(i) > largest) largest = sizes.get(i);
      System.out.println(i + " : " + sizes.get(i));
    }

    

    out.println(largest);

    int combinedLargest = 0;
    int x = rooms[0].length - 1, y = 0;
    Character direction = 'E';

    for(int i = 0; i < rooms.length; i++){
      for(int j = 0; j < rooms[i].length; j++){
        if(i - 1 >= 0) if(rooms[i][j] != rooms[i - 1][j]){
          int sum = sizes.get(rooms[i][j]) + sizes.get(rooms[i - 1][j]);
          
          if(sum > combinedLargest){
            combinedLargest = sum;
            x = j + 1;
            y = i + 1;
            direction = 'N';
          }else if(sum == combinedLargest){
            if(j + 1 < x){
              x = j + 1;
              y = i + 1;
              direction = 'N';
            }else if(j + 1 == x && i + 1 > y){
              y = i + 1;
              direction = 'N';
            }else if(j + 1 == x && i + 1 == y && direction == 'E'){
              direction = 'N';
            }
          }
        }

        if(j + 1 < rooms[i].length) if(rooms[i][j] != rooms[i][j + 1]){
          int sum = sizes.get(rooms[i][j]) + sizes.get(rooms[i][j + 1]);
          
          if(sum > combinedLargest){
            combinedLargest = sum;
            x = j + 1;
            y = i + 1;
            direction = 'E';
          }else if(sum == combinedLargest){
            if(j + 1 < x){
              x = j + 1;
              y = i + 1;
              direction = 'E';
            }else if(j + 1 == x && i + 1 > y){
              y = i + 1;
              direction = 'E';
            }
          }
        }
      }
    }

    out.println(combinedLargest);
    out.println(y + " " + x + " " + direction);

    out.close();
  }

  public static void findLayout(){
    boolean find = false;

    for(int i = 0; i < rooms.length; i++){
      for(int j = 0; j < rooms[i].length; j++){

        if(rooms[i][j] != null) if(rooms[i][j] == -2){

          int temp = floor[i][j];
          rooms[i][j] = current;
          counter += 1;

          if(temp >= 8){
            temp -= 8;
          }else if(rooms[i + 1][j] == null){
            rooms[i + 1][j] = -2;           
            find = true;
          }

          if(temp >= 4){
            temp -= 4;
          }else if(rooms[i][j + 1] == null){
            rooms[i][j + 1] = -2;           
            find = true;
          }

           if(temp >= 2){
            temp -= 2;
          }else if(rooms[i - 1][j] == null){
            rooms[i - 1][j] = -2;           
            find = true;
          }

          if(temp >= 1){
            temp -= 1;
          }else if(rooms[i][j - 1] == null){
            rooms[i][j - 1] = -2;           
            find = true;
          }

        }  
      }
    }

    if(find){
      findLayout();
    }else{
      sizes.put(current, counter);
    }
  }
}