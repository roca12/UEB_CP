/*
NAME: super_j6
LANG: JAVA
PROG: cowtour
*/

import java.util.*;
import java.io.*;
import java.lang.*;

class cowtour{
  public static double[][] connections;
  public static int pastures;

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("cowtour.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("cowtour.out")));

    pastures = Integer.parseInt(f.readLine());
    int[][] positions = new int[pastures][2];
    connections = new double[pastures][pastures];

    for(int i = 0; i < pastures; i++){
      StringTokenizer st = new StringTokenizer(f.readLine());
      positions[i][0] = Integer.parseInt(st.nextToken());
      positions[i][1] = Integer.parseInt(st.nextToken());
    }

    for(int i = 0; i < pastures; i++){
      char[] array = f.readLine().toCharArray();

      for(int j = 0; j < array.length; j++){
        if(array[j] == '1'){
          connections[i][j] = (double)Math.sqrt(Math.pow(positions[i][0] - positions[j][0], 2) + Math.pow(positions[i][1] - positions[j][1], 2));
        }else{
          connections[i][j] = Double.MAX_VALUE;
        }

        if(i == j) connections[i][j] = 0;
      }

      //System.out.println(Arrays.toString(connections[i]));
    }

    

    for(int k = 0; k < pastures; k++){
      for(int i = 0; i < pastures; i++){
        for(int j = 0; j < pastures; j++){
          if(connections[i][k] + connections[k][j] < connections[i][j]) connections[i][j] = connections[i][k] + connections[k][j]; 
        }
      }
      //System.out.println(Arrays.toString(connections[i]));
    }

    double[] dist = new double[pastures];

    double segmentLowest = 0;

    for(int i = 0; i < pastures; i++){
      for(int j = 0; j < pastures; j++){
        if(connections[i][j] != Double.MAX_VALUE){
          dist[i] = Math.max(connections[i][j], dist[i]);
          segmentLowest = Math.max(dist[i], segmentLowest);
        }
      }
    }

    double globalLowest = Double.MAX_VALUE;

    for(int i = 0; i < pastures; i++){
      for(int j = i + 1; j < pastures; j++){
        if(connections[i][j] == Double.MAX_VALUE){
          double a = dist[i] + dist[j] + (double)Math.sqrt(Math.pow(positions[i][0] - positions[j][0], 2) + Math.pow(positions[i][1] - positions[j][1], 2));

          if(a < globalLowest){
            globalLowest = a;
          }
        }
      }
    }
    
    out.printf("%.6f", Math.max(globalLowest, segmentLowest));
    out.println();

    out.close();
   
  }

}