/*
NAME: super_j6
LANG: JAVA
PROG: cowtour
*/

import java.util.*;
import java.io.*;
import java.lang.*;

class cowtour{
  public static ArrayList<Integer> group1 = new ArrayList<>();
  public static float[][] connections;
  public static int pastures;

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("cowtour.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("cowtour.out")));

    pastures = Integer.parseInt(f.readLine());
    int[][] positions = new int[pastures][2];
    connections = new float[pastures][pastures];

    for(int i = 0; i < pastures; i++){
      StringTokenizer st = new StringTokenizer(f.readLine());
      positions[i][0] = Integer.parseInt(st.nextToken());
      positions[i][1] = Integer.parseInt(st.nextToken());
    }

    group1.add(0);

    for(int i = 0; i < pastures; i++){
      char[] array = f.readLine().toCharArray();

      for(int j = 0; j < array.length; j++){
        if(array[j] == '1'){
          connections[i][j] = (float)Math.sqrt(Math.pow(positions[i][0] - positions[j][0], 2) + Math.pow(positions[i][1] - positions[j][1], 2));
        }
      }

      //System.out.println(Arrays.toString(connections[i]));
    }

    recur(0);

    float globalLowest = 0;

    for(int i = 0; i < pastures; i++){

      for(int j = 0; j < pastures; j++){
        float conHighest = 0;  

        if((group1.contains(i) && group1.contains(j)) || (!group1.contains(i) && !group1.contains(j))) continue; 

        for(int index = 0; index < pastures; index ++){
          int counter = 0;
          
          if(connections[i][j] != 0 || i == j) continue;

          float[][] curr = new float[pastures][pastures];

          for(int k = 0; k < pastures; k++){
            curr[k] = connections[k].clone();
          }
        
          curr[i][j] = (float)Math.sqrt(Math.pow(positions[i][0] - positions[j][0], 2) + Math.pow(positions[i][1] - positions[j][1], 2));
        
          float[] distance = new float[pastures];
          boolean[] visited = new boolean[pastures];

          distance[index] = 0;
          visited[index] = true;
          int last = index;

          //System.out.println();
          //System.out.println(index + " " + i + " " + j);

          

          for(int k = 0; k < pastures; k++){
            for(int n = 0; n < pastures; n++){
              if(curr[last][n] != 0){

                if(!visited[n]){

                  if(distance[n] == 0){

                    distance[n] = curr[last][n] + distance[last];
                  }else if(distance[last] + curr[last][n] < distance[n]){
                   distance[n] = distance[last] + curr[last][n];
                  } 
                }
              }
            }

            float tester = 0;
            int newLast = last;

            for(int n = 0; n < pastures; n++){
              if(!visited[n] && distance[n] != 0){
                if(tester == 0){
                  newLast = n;
                  tester = distance[n];
                }else if(distance[n] < tester){
                  newLast = n;
                  tester = distance[n];
                }
              }
            }


            if(newLast == last) break;
            counter = k;
            last = newLast;

            visited[last] = true;
            //System.out.println(Arrays.toString(distance));
            //System.out.println(Arrays.toString(visited));
          }
          //System.out.println();

          
          for(int k = 0; k < pastures; k++){
            if(distance[k] > conHighest) conHighest = distance[k];
          }

        }

        if(globalLowest == 0){
          globalLowest = conHighest;
        }else if(conHighest < globalLowest && conHighest != 0){
          globalLowest = conHighest;
        }
  
      }

    }

    out.printf("%.6f", globalLowest);
    out.println();

    out.close();
   
  }

  public static void recur(int n){
    for(int i = 0; i < pastures; i++){
      if(connections[n][i] != 0 && !group1.contains(i)){
        group1.add(i);
        recur(i);
      }
    }
  }

}