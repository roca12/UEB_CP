/*
NAME: super_j6
LANG: JAVA
PROG: fence6
*/

import java.util.*;
import java.lang.*;
import java.io.*;

class fence6{
  public static int best = Integer.MAX_VALUE;

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("fence6.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("fence6.out")));
    StringTokenizer st;

    int N = Integer.parseInt(f.readLine());
    int[][] dist = new int[2 * N][2 * N];

    for(int i = 0; i < dist.length; i++){
      Arrays.fill(dist[i], Integer.MAX_VALUE);
    }
    
    for(int i = 0; i < N; i++){
      st = new StringTokenizer(f.readLine());
      int id = Integer.parseInt(st.nextToken()) - 1, length = Integer.parseInt(st.nextToken()), amt1 = Integer.parseInt(st.nextToken()), amt2 = Integer.parseInt(st.nextToken());
      dist[id][id + N] = length;
      dist[id + N][id] = length;
      
      st = new StringTokenizer(f.readLine());

      for(int j = 0; j < amt1; j++){
        int connect = Integer.parseInt(st.nextToken()) - 1;

        if(dist[id][connect] == 0){
          dist[id + N][connect] = Integer.MAX_VALUE;
          dist[connect][id + N] = Integer.MAX_VALUE;

          //System.out.println((id + 1) + " " + (connect + 1));
        }else if(dist[id][connect + N] == 0){
          dist[id + N][connect + N] = Integer.MAX_VALUE;
          dist[connect + N][id + N] = Integer.MAX_VALUE;

          //System.out.println((id + 1) + " " + (connect + N + 1));
        }else{
          dist[id][connect] = 0;
          dist[connect][id] = 0;
          dist[id][connect + N] = 0;
          dist[connect + N][id] = 0;
        }

      }

      st = new StringTokenizer(f.readLine());

      for(int j = 0; j < amt2; j++){
        int connect = Integer.parseInt(st.nextToken()) - 1;

        if(dist[id + N][connect] == 0){
          dist[id][connect] = Integer.MAX_VALUE;
          dist[connect][id] = Integer.MAX_VALUE;

          //System.out.println((id + N + 1) + " " + (connect + 1));
        }else if(dist[id + N][connect + N] == 0){
          dist[id][connect + N] = Integer.MAX_VALUE;
          dist[connect + N][id] = Integer.MAX_VALUE;
        

          //System.out.println((id + N + 1) + " " + (connect + N + 1));
        }else{
          dist[id + N][connect] = 0;
          dist[connect][id + N] = 0;
          dist[id + N][connect + N] = 0;
          dist[connect + N][id + N] = 0;
        }
      }

    }

    /*
    for(int j = 0; j < dist.length; j++){
      System.out.println(Arrays.toString(dist[j]));
    }
    */

    for(int i = 0; i < N; i++){
      best = Math.min(best, dijkstra(dist, i));
    }  

    out.println(best);

    out.close();
  }

  public static int dijkstra(int[][] graph, int s){
    int[] dist = new int[graph.length];
    Arrays.fill(dist, Integer.MAX_VALUE);
    dist[s] = 0;
    boolean[] used = new boolean[dist.length];
    int last = s;

    while(last != s + dist.length/2){
      int min = Integer.MAX_VALUE;
      int minindex = -1;
      //System.out.println(Arrays.toString(used) + " " + last);
      //System.out.println();
      if(last == -1) return Integer.MAX_VALUE;
      used[last] = true;

      for(int i = 0; i < graph.length; i++){
        if(i == last) continue;

        if(!((last == s && i == s + dist.length/2) || (last == s + dist.length/2 && i == s)) && graph[last][i] != Integer.MAX_VALUE){
          int temp = dist[last] + graph[last][i];
          if(temp < dist[i]) dist[i] = temp;
        }

        if(dist[i] < min && used[i] == false){
          min = dist[i];
          minindex = i;
        } 
      }

      last = minindex;
    }

    //System.out.println(Arrays.toString(dist));
    //System.out.println(dist[dist.length/2 + s] + graph[s][dist.length/2 + s]);
    //System.out.println();

    return dist[dist.length/2 + s] + graph[s][dist.length/2 + s];
     
  }

}