/*
NAME: super_j6
LANG: JAVA
PROG: frac1
*/

import java.lang.*;
import java.io.*;
import java.util.*;

class frac1{
public static int num;
public static ArrayList<Integer> numerators = new ArrayList<>(), denominators = new ArrayList<>();

  public static void main(String[] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("frac1.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("frac1.out")));

    num = Integer.parseInt(f.readLine());

    numerators.add(0);
    numerators.add(1);

    denominators.add(1);
    denominators.add(1);

    if(num > 1) findFractions(2);

    for(int i = 0; i < numerators.size(); i++){
      out.println(numerators.get(i) + "/" + denominators.get(i));
    }        

    out.close();
  }

  public static void findFractions(int n){
    int current = 1;    

    for(int i = 1; i < n; i++){
      if(relativelyPrime(n, i)){
        for(current = current; current < numerators.size(); current++){
          float compare1 = (float)numerators.get(current - 1) / (float)denominators.get(current - 1);
          float compare2 = (float)numerators.get(current) / (float)denominators.get(current);
          float number = (float)i / (float)n;

          //System.out.println(compare1 + " " + number + " " + compare2);

          if(compare1 < number && compare2 > number){
            numerators.add(current, i);
            denominators.add(current, n);
            current += 1;
            break;
          }  
        }
      }      
    }

    if(n < num) findFractions(n + 1);

  }

  public static boolean relativelyPrime(int n, int m){
    if(gcfCheck(n, m) == 1) return true;

    return false;
  }

  public static int gcfCheck(int n, int m){

    if(m > n){
      int temp = n;
      n = m;
      m = temp; 
    }

    if(n % m == 0){
      return m;
    }

    return gcfCheck(m, n % m);
    
  }

}