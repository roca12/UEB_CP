/*
NAME: super_j6
LANG: JAVA
PROG: holstein
*/

import java.util.*;
import java.io.*;
import java.lang.*;

class holstein{
public static ArrayList<String> combinations = new ArrayList<>();

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("holstein.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("holstein.out")));

    int vnum = Integer.parseInt(f.readLine()), amount = 1;
    int[] mainCase = new int[vnum];

    StringTokenizer st = new StringTokenizer(f.readLine());

    for(int i = 0; i < vnum; i++){
      mainCase[i] = Integer.parseInt(st.nextToken());
    }

    int fnum = Integer.parseInt(f.readLine());
    int[][] feedVals = new int[fnum][vnum];

    for(int i = 0; i < fnum; i++){
      st = new StringTokenizer(f.readLine());
      for(int j = 0; j < vnum; j++){
        feedVals[i][j] = Integer.parseInt(st.nextToken());
      }
    }

    comboMaker(fnum);

    combinations.sort(Comparator.comparing(String::length));

    for(int i = 0; i < combinations.size(); i++){
      char[] array = combinations.get(i).toCharArray();

      int[] tester = new int[vnum];

      for(int j = 0; j < tester.length; j++) tester[j] = 0;

      for(int j = 0; j < tester.length; j++){
        for(int k = 0; k < array.length; k++){
          tester[j] += feedVals[Character.getNumericValue(array[k])][j];
        }
      }

      //System.out.println(Arrays.toString(tester));

      Boolean correct = true;

      for(int j = 0; j < tester.length; j++){
        if(tester[j] < mainCase[j]) correct = false;
        //System.out.println(tester[j] + " " + mainCase[j] +" " + correct);
      }

      if(correct){
        out.print(array.length);

        for(int j = 0; j < array.length; j++){
          out.print(" " + (Character.getNumericValue(array[j]) + 1));
        }

        break;
      }
    }

    out.println();
    
    out.close();
  }

  public static void comboMaker(int max){
    for(int i = 0; i < max; i++){
      combinations.add(Integer.toString(i, 15));
      comboMaker(Integer.toString(i, 15), max);
    }  
  }

  private static void comboMaker(String current, int max){
    char[] array = current.toCharArray();
    Character last = array[array.length - 1];
    for(int i = Character.getNumericValue(last) + 1; i < max; i++){
      String newSt = current + Integer.toString(i, 15);
      combinations.add(newSt);
      comboMaker(newSt, max);
    }
  }

}