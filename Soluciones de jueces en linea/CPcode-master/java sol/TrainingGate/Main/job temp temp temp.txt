/*
NAME: super_j6
LANG: JAVA
PROG: job
*/

import java.lang.*;
import java.util.*;
import java.io.*;

class job{

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("job.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("job.out")));
    StringTokenizer st = new StringTokenizer(f.readLine());
    
    int n = Integer.parseInt(st.nextToken()), m1 = Integer.parseInt(st.nextToken()), m2 = Integer.parseInt(st.nextToken()), maxtime = 15000;
    int[][] graphA = new int[20][maxtime], graphB = new int[20][maxtime];

    for(int i = 0; i < m1; i++){
      if(!st.hasMoreTokens()) st = new StringTokenizer(f.readLine());

      int length = Integer.parseInt(st.nextToken()) - 1;
      
      for(int j = length; j < graphA[length].length; j++){
        graphA[length][j] += 1;
      } 
    }

    for(int i = 0; i < m2; i++){
      if(!st.hasMoreTokens()) st = new StringTokenizer(f.readLine());

      int length = Integer.parseInt(st.nextToken()) - 1;
      
      Arrays.fill(graphB[length], graphB[length][0] + 1);
    }

    int[] addB = new int[maxtime];
    int poolA = n;
    int time = 0;

    while(poolA > 0){
      //System.out.println(":" +  poolA);

      for(int j = graphA.length - 1; j >= 0; j--){
        int change = Math.min(poolA, graphA[j][time]);
        addB[time + 1] += change;

        //if(change > 0) System.out.println(change);

        poolA = Math.max(0, poolA - change);
        

        for(int k = time; k <= time + j; k++){
          graphA[j][k] -= change;
        }

      }

      time++;
    }

    //System.out.println(":" + poolA);

    //for(int i = 0; i < graphA.length; i++) System.out.println(Arrays.toString(graphA[i]));
    //System.out.println();

    int[] poolB = new int[addB.length];
    poolB = addB.clone();
    int time2 = search(graphB, poolB, n, 0, maxtime);

    out.println(time + " " + time2);
    //out.println("yeet");

    out.close();
  }

  public static int search(int[][] graph, int[] pool, int amount, int min, int max){
    int half = (max + min)/2;

    if(possible(graph, pool, amount, half)){
      if(!possible(graph, pool, amount, half - 1)) return half;

      return search(graph, pool, amount, 0, half);
    }

    return search(graph, pool, amount, half, max);
  }

  public static boolean possible(int[][] graphn, int[] pooln, int amount, int expected){

    int[][] graph = new int[graphn.length][graphn[0].length];

    for(int j = 0; j < graphn.length; j++) graph[j] = graphn[j].clone();

    int[] pool = pooln.clone();

    int time = expected - 1;

    while(amount > 0 && time >= 0){
      //System.out.println(Arrays.toString(pool) + " " + time + " " + expected + " " + amount);

      for(int j = graph.length - 1; j >= 0; j--){
        if(graph[j][time] > 0){

          for(int i = time - j; i >= 0; i--){

            if(graph[j][time] == 0) break;

            if(pool[i] > 0){

              int change = Math.min(graph[j][time], pool[i]);

              pool[i] -= change;
              amount -= change;

              for(int k = time; k >= Math.max(0, time - j); k--) graph[j][k] -= change;
              
            }

          }

        }
      }

      time--;
    }

    //System.out.println();

    if(amount > 0) return false;

    return true;        

  }

}