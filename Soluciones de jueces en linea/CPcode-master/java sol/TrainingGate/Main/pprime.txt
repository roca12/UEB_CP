/*
NAME: super_j6
LANG: JAVA
PROG: pprime
*/

import java.io.*;
import java.util.*;
import java.lang.*;

class pprime{
public static ArrayList<Integer> solutions = new ArrayList<>();
public static int min, max, digitsMax, digitsMin;

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("pprime.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("pprime.out")));
    StringTokenizer st = new StringTokenizer(f.readLine());

    min = Integer.parseInt(st.nextToken());
    max = Integer.parseInt(st.nextToken());
    digitsMax = (int)(Math.log(max)/Math.log(10));
    digitsMin = (int)(Math.log(min)/Math.log(10));

    calcPPrimes();

    for(int i = 0; i < solutions.size(); i++){
      out.println(solutions.get(i));
    }

    out.close();
  }

  public static void calcPPrimes(){
    int num = min;

    while(true){
      if(isPal(num)){
        createPPrimes(num);
        break;
      }else if(num > max){
        break;
      }

      num += 1;
    }
  }

  public static void createPPrimes(int num){
    if(isPrime(num)) solutions.add(num);


    char[] arrayTemp = Integer.toString(num).toCharArray();
    String[] array = new String[arrayTemp.length];

    for(int i = 0; i < arrayTemp.length; i++){
      array[i] = Character.toString(arrayTemp[i]);
    }

    array[array.length / 2] = Integer.toString(Integer.parseInt(array[array.length / 2]) + 1);
    if(array.length % 2 == 0) array[array.length - 1 - array.length / 2] = Integer.toString(Integer.parseInt(array[array.length - 1 - (array.length / 2)]) + 1);

    for(int i = 0; i < (array.length - 1) / 2; i++){
      int val = (array.length - 1) / 2;

      
      if(Integer.parseInt(array[val - i]) > 9){
        array[val - i] = Integer.toString(0);

        if(array.length % 2 == 0){
          array[val + i + 1] = Integer.toString(0);

          array[val - i - 1] = Integer.toString(Integer.parseInt(array[val - i - 1]) + 1);
          array[val + i + 2] = Integer.toString(Integer.parseInt(array[val + i + 2]) + 1);
        }else{
          array[val + i] = Integer.toString(0);

          array[val - i - 1] = Integer.toString(Integer.parseInt(array[val - i - 1]) + 1);
          array[val + i + 1] = Integer.toString(Integer.parseInt(array[val + i + 1]) + 1);          
        }
      }
    }
System.out.println(Arrays.toString(array));

    if(Integer.parseInt(array[0]) > 9){
      num = (int)Math.pow(10, array.length) + 1;
    }else{
      String temp = "";
      for(int i = 0; i < array.length; i++){
        temp += array[i];
      }

      num = Integer.parseInt(temp);
    }

    if(num <= max){
      createPPrimes(num);
    }    
  }

  public static boolean isPal(int num){
    char[] array = Integer.toString(num).toCharArray();
    for(int i = 0; i < Math.ceil(array.length / 2); i++){
      if(array[i] != array[array.length - 1 - i]) return false;
    }

    return true;
  }

  public static boolean isPrime(int num){
    for(int i = 2; i <= Math.sqrt(num); i++){
      if(num % i == 0) return false;
    }

    return true;
  }

}

