/*
NAME: super_j6
LANG: JAVA
PROG: prefix
*/

import java.util.*;
import java.io.*;
import java.lang.*;

class prefix{
public static String[] primitives;
public static boolean[] visited;
public static long largest;
public static long first = System.currentTimeMillis();

  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("prefix.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("prefix.out")));

    ArrayList<String> primitivesTemp = new ArrayList<>();    
    StringTokenizer st = new StringTokenizer(f.readLine());
    String next = st.nextToken();
    
    while(!next.equals(".")){
      primitivesTemp.add(next);
      while(st.hasMoreTokens()){
        next = st.nextToken();
        primitivesTemp.add(next);
      }
      st = new StringTokenizer(f.readLine());
      next = st.nextToken();
    }

    StringBuilder bigBoyString = new StringBuilder(200010);
    while(f.ready()){
      bigBoyString.append(f.readLine());
    }

    primitives = new String[primitivesTemp.size()];

    for(int i = 0; i < primitives.length; i++){
      primitives[i] = primitivesTemp.get(i);
    }

    //System.out.println(Arrays.toString(primitives));
    //System.out.println(bigBoyString);

    visited = new boolean[bigBoyString.length() + 1];

    superRec(bigBoyString);

    System.out.println(System.currentTimeMillis() - first);

    for(int i = 0; i < visited.length; i++){
      if(visited[i]) largest = i;
    }

    out.println(largest);

    System.out.println(System.currentTimeMillis() - first);

    //System.out.println(Arrays.toString(visited));

    out.close();

    System.out.println(System.currentTimeMillis() - first);
  }

  public static void superRec(StringBuilder stringy){
    visited[0] = true; 

    for(int i = 0; i < stringy.length(); i++){
      if(!visited[i]) continue;

      if(i % 1000 == 0) System.out.println(System.currentTimeMillis() - first);

      for(int k = 0; k < primitives.length; k++){
        String thingy = primitives[k];
        boolean match = true;

        if(thingy.length() + i > stringy.length()) continue;
        if(visited[i + thingy.length()]) continue;

        for(int j = 0; j < thingy.length(); j++){
          if(thingy.charAt(j) != stringy.charAt(i + j)){          
            match = false;
            break;
          }
        }

        if(match){
          visited[i + thingy.length()] = true;
        }
      }


    }
  }

}