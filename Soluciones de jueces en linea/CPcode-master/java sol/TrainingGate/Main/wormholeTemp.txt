
/*
NAME: super_j6
LANG: JAVA
PROG: wormhole
*/

import java.util.*;
import java.io.*;
import java.lang.*;

class wormhole{
  static HashMap right = new HashMap<Integer, Integer>();
  static HashMap pairs = new HashMap<Integer, Integer>();
  static ArrayList<String> permutations = new ArrayList<String>();
  static String positions = "";
  
 
  public static void main(String [] args) throws IOException{
    BufferedReader f = new BufferedReader(new FileReader("wormhole.in"));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("wormhole.out")));

    int number = Integer.parseInt(f.readLine()), total = 0;
    Integer[] xVal = new Integer[number], yVal = new Integer[number], index = new Integer[number], sorted = new Integer[number];

    for(int i = 0; i < number; i++){
      StringTokenizer st = new StringTokenizer(f.readLine());
      xVal[i] = Integer.parseInt(st.nextToken());
      yVal[i] = Integer.parseInt(st.nextToken());
      index[i] = i;
      sorted[i] = i;
    }

    Arrays.sort(index, new Comparator<Integer>(){
      public int compare(Integer i1, Integer i2){
        return Double.compare(xVal[i1], xVal[i2]);
      }
    });
    
    Arrays.sort(sorted, new Comparator<Integer>(){
      public int compare(Integer i1, Integer i2){
        return Double.compare(yVal[index[i1]], yVal[index[i2]]);
      }
    });

    for(Integer i = 0; i < number - 1; i++){
	if(yVal[index[sorted[i]]].equals(yVal[index[sorted[i + 1]]])) right.put(index[sorted[i]], index[sorted[i + 1]]);
    }

    for(int i = 0; i < number; i++){
      positions += Integer.toString(i, 12);
    }

    permutate(positions);   
     
    
    for(Integer i = 0; i < permutations.size(); i++){
      pairs.clear();
      for(Integer j = 0; j < number/2; j++){
        char[] array = permutations.get(i).toCharArray();
        Integer a = Character.getNumericValue(array[j*2]), b = Character.getNumericValue(array[j*2+1]);

        pairs.put(a, b);
        pairs.put(b, a);
      }
 
      
      for(int j = 0; j < number; j++){
        if(isCyclic(j, j)){
          total += 1;
          break;
        }
      } 
    }    
    
    
    out.println((int)((total)));

    out.close();
  }

  public static boolean isCyclic(int start, int current){
    if(right.containsKey(current)){
      if((int)pairs.get(right.get(current)) == start){
        return true;
      }else{
        return isCyclic(start, (int)pairs.get(right.get(current)));
      }
    }else{
      return false;
    }
  }

  public static int factorial(int n){
    int answer = 1;
    while(n > 0){
      answer *= n;
      n -= 1;
    }

    return answer;
  }

  public static void permutate(String str){
    permutate("", str);
  }

  private static void permutate(String prefix, String str){
    int n = str.length();
    if(n == 0) permutations.add(prefix); 
    else{
      for(int i = 1; i < n; i++){
       permutate(prefix + str.charAt(0) + str.charAt(i), str.substring(1, i) + str.substring(i+1 , n));
        
      }
    }
    
  }
 
}
 
